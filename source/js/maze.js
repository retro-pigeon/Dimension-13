const maze = () => {
    var mz = Group([]);

    var size = 26;

    var mazeMap = ``.split("").map(x => +x);

    for (let i = 0; i < size * size; i++) {
        const x = 4 * (i % size) - size * 2 + 3;
        const y = Math.floor(i / size) * 4 - size * 2 + 3;
        if (mazeMap[i]) {
            mz.meshes.push(Mesh(cube.vertices, cube.indices, cube.colors, vector3(x, 0, y), vector3(0, 0, 0), vector3(2, 2, 2)));
        }

        else {
            let yN = .2 * mazeMap[i - size];
            let yP = -.2 * mazeMap[i + size];
            let xN = .2 * mazeMap[i - 1];
            let xP = -.2 * mazeMap[i + 1];
            
            map.push([
                x - 2 + xN, y - 2 + yN, x - 2 + xN, y + 2 + yP,
                x - 2 + xN, y + 2 + yP, x + 2 + xP, y + 2 + yP,
                x + 2 + xP, y + 2 + yP, x + 2 + xP, y - 2 + yN,
                x + 2 + xP, y - 2 + yN, x - 2 + xN, y - 2 + yN
            ]);
        }
    }
    meshes.push(mz);
}