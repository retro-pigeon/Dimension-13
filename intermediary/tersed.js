zzfx=(...t)=>zzfxP(zzfxG(...t));zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map(((d,i)=>f.getChannelData(i).set(d))),e.buffer=f,e.connect(zzfxX.destination),e.start();return e};zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1e9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1e9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z};zzfxV=.5;zzfxR=44100;zzfxX=new(window.AudioContext||webkitAudioContext);let gem={vertices:[0,0,-150,-86,0,-75,-86,0,75,0,0,150,86,0,75,86,0,-75,0,50,-96,-55,50,-48,-55,50,48,0,50,96,55,50,48,55,50,-48,0,-50,-96,-55,-50,-48,-55,-50,48,0,-50,96,55,-50,48,55,-50,-48],normals:[],indices:[4,9,3,2,7,1,5,10,4,3,8,2,1,6,0,0,11,5,8,10,6,15,4,3,1,14,2,4,17,5,2,15,3,12,1,0,5,12,0,12,16,14,4,10,9,2,8,7,5,11,10,3,9,8,1,7,6,0,6,11,6,7,8,8,9,10,10,11,6,15,16,4,1,13,14,4,16,17,2,14,15,12,13,1,5,17,12,14,13,12,12,17,16,16,15,14],colors:[["#80D08C",32]]};let spider_body={vertices:[-91,208,125,-91,338,-4,-91,78,-4,-206,208,-257,0,208,154,0,367,-4,-112,288,75,-112,129,75,-124,295,-67,-124,120,-67,0,50,-4,-202,212,-397,0,318,104,-154,208,-4,0,87,-100,0,99,104,0,328,-100,-107,296,-582,-88,220,-631,-107,144,-582,0,220,-658,0,115,-611,0,325,-611,-150,345,-261,0,395,-312,0,28,-312,-188,78,-261],normals:[],indices:[12,1,6,12,0,4,0,13,7,1,13,6,8,9,13,13,2,7,2,14,10,11,17,18,0,15,4,2,15,7,24,17,23,1,16,8,18,21,19,18,22,20,11,19,26,25,19,21,14,26,25,3,26,9,16,23,8,3,23,11,12,5,1,12,6,0,0,6,13,1,8,13,8,3,9,13,9,2,2,9,14,11,23,17,0,7,15,2,10,15,24,22,17,1,5,16,18,20,21,18,17,22,11,18,19,25,26,19,14,9,26,3,11,26,16,24,23,3,8,23],colors:[["#442424",40]]};let spider_leg={vertices:[-328,194,-200,-326,234,-200,-324,194,-160,-322,234,-160,-167,165,-168,-161,223,-168,-172,165,-221,-166,223,-222,-442,195,-185,-450,227,-184,-439,195,-153,-446,227,-152,-569,143,-170,-589,161,-168,-567,143,-144,-586,161,-142,-627,0,-158,-640,5,-157,-625,0,-144,-639,5,-143],normals:[],indices:[5,2,4,3,10,2,2,6,4,5,1,3,0,7,6,11,14,10,1,8,9,2,8,0,1,11,3,13,19,15,9,12,13,10,12,8,9,15,11,14,19,18,12,17,13,14,16,12,5,3,2,3,11,10,2,0,6,5,7,1,0,1,7,11,15,14,1,0,8,2,10,8,1,9,11,13,17,19,9,8,12,10,14,12,9,13,15,14,15,19,12,16,17,14,18,16],colors:[["#5d5775",32]]};let cube={vertices:[100,200,-100,100,0,-100,100,200,100,100,0,100,-100,200,-100,-100,0,-100,-100,200,100,-100,0,100],normals:[],indices:[2,7,3,6,5,7,0,3,1,4,1,5,2,6,7,6,4,5,0,2,3,4,0,1],colors:[["#5d5775",8]]};let plane={vertices:[-100,0,100,100,0,100,-100,0,-100,100,0,-100],normals:[],indices:[1,2,0,1,3,2],colors:[["#474259",2]]};let circle={vertices:[-70,0,-70,-100,0,0,-61,0,-61,-86,0,0],normals:[],indices:[0,3,1,0,2,3],colors:[["#B44840",2]]};let elevator={vertices:[0,298,266,0,309,299,0,15,266,0,4,299,0,304,254,-14,20,268,-14,293,268,0,10,254,-127,304,127,-133,298,133,-149,309,149,-141,293,141,-141,20,141,-133,15,133,-149,4,149,-127,10,127,0,15,0,0,309,0,0,304,0],normals:[],indices:[4,9,8,6,2,5,5,1,6,6,10,11,5,13,12,7,14,15,7,13,2,5,14,3,17,10,1,6,9,0,4,10,1,18,8,4,13,16,2,4,0,9,6,0,2,5,3,1,6,1,10,5,2,13,7,3,14,7,15,13,5,12,14,6,11,9,4,8,10],colors:[["#626D56",23]]};const Gem=()=>{let x=50-100*Math.random(),z=50-100*Math.random();if(!pointIsOnMap(x,z))return Gem();const mesh=Mesh(gem.vertices,gem.indices,gem.colors,vector3(x,0,z),vector3(Math.PI/2,0,0),vector3(.25,.25,.25));meshes.push(mesh);return deltaTime=>{mesh.position.y=Math.sin(timeStamp/1e3)*.25+1;mesh.rotation.y+=deltaTime;if(!mesh.off&&distanceTo(mesh.position,camera.position)<3){mesh.off=true;gemsFound++}}};let map=[];var pointIsOnMap=(x,y)=>{for(const polygon of map){let count=0;for(let i=0;i<polygon.length;i+=4){let edgeStartX=polygon[i],edgeStartY=polygon[i+1],edgeEndX=polygon[i+2],edgeEndY=polygon[i+3];if(y<edgeStartY!==y<edgeEndY&&x<edgeStartX+(y-edgeStartY)/(edgeEndY-edgeStartY)*(edgeEndX-edgeStartX))count+=1}if(count%2!==0)return true}return false};drawMap=(context,camera)=>{const xOffset=25.5,yOffset=25.5;context.fillStyle="rgba(191, 191, 191,.2)";map.forEach((polygon=>{context.beginPath();for(let i=0;i<polygon.length;i+=2)context.lineTo(xOffset+polygon[i]/4,yOffset+polygon[i+1]/4);context.fill()}));let playerX=xOffset+camera.position.x/2;let playerZ=yOffset+camera.position.z/2;context.fillStyle="blue";context.fillRect(playerX-2,playerZ-2,4,4);context.strokeStyle="white";context.lineWidth=1;context.beginPath();context.moveTo(playerX,playerZ);context.lineTo(playerX+10*Math.cos(camera.yaw+Math.PI/2),playerZ+10*Math.sin(camera.yaw+Math.PI/2));context.stroke();for(let p of spider_positions){context.fillRect(p.x/2+xOffset,p.z/2+yOffset,1,1)}};function generateMaze(w,h){const m=Array.from({length:h},(()=>Array(w).fill(1)));const dirs=[[0,2],[2,0],[0,-2],[-2,0]];function inBounds(x,y){return x>=0&&y>=0&&x<w&&y<h}function dfs(x,y){m[y][x]=0;dirs.sort((()=>Math.random()-.5)).forEach((([dx,dy])=>{const[nx,ny]=[x+dx,y+dy];const[mx,my]=[x+dx/2,y+dy/2];if(inBounds(nx,ny)&&m[ny][nx]){m[my][mx]=0;dfs(nx,ny)}}))}dfs(1,1);const cx=w>>1;const cy=w>>1;for(let dy=-2;dy<=2;dy++){for(let dx=-2;dx<=2;dx++){if(inBounds(cx+dx,cy+dy)){m[cy+dy][cx+dx]=0}}}m[0][1]=m[h-1][w-2]=0;return m}const maze=()=>{var mz=Group([]);var size=50;var mazeMap=generateMaze(50,50).flat().map((f=>Math.random()<.2?0:f));for(let i=0;i<size*size;i++){const x=4*(i%size)-size*2+3;const y=Math.floor(i/size)*4-size*2+3;if(mazeMap[i]){mz.meshes.push(Mesh(cube.vertices,cube.indices,cube.colors,vector3(x,0,y),vector3(0,0,0),vector3(2,2,2)))}else{let yN=.2*mazeMap[i-size];let yP=-.2*mazeMap[i+size];let xN=.2*mazeMap[i-1];let xP=-.2*mazeMap[i+1];map.push([x-2+xN,y-2+yN,x-2+xN,y+2+yP,x-2+xN,y+2+yP,x+2+xP,y+2+yP,x+2+xP,y+2+yP,x+2+xP,y-2+yN,x+2+xP,y-2+yN,x-2+xN,y-2+yN])}}meshes.push(mz)};messages=[];showMessage=(text,x,y,size=50,duration=1e6,delay=0)=>messages.push({text:text,x:x,y:y,size:size,duration:duration,delay:delay,counter:0,ySpeed:Math.max(random(3),1)});updateMessages=()=>{messages.forEach(((message,i)=>{if(message.delay-- >0)return;message.counter+=1;context.font=`${message.size}px ${font}`;context.textAlign="center";context.textBaseline="middle";if(message.duration<100)message.y-=message.ySpeed;if(message.counter<=20)context.fillStyle=`rgba(255,255,255 ,${message.counter/20})`;if(message.counter>20&&message.counter<=message.duration-60)context.fillStyle="white";if(message.counter>message.duration-60)context.fillStyle=`rgba(255,255,255,${-(message.counter-message.duration)/60})`;context.fillText(message.text,message.x,message.y);if(message.counter>message.duration)messages.splice(i,1)}))};const font="serif";const raycast=(camera,points)=>{let cameraDirection=substract(camera.position,camera.target);for(index in points){let direction=normalize(substract(camera.position,points[index]));let difference=summate(substract(cameraDirection,direction));let distance=distanceTo(camera.position,points[index]);if(distance<5&&difference<3&&spider_death[index]){spider_healths[index]-=.5;zzfx(...[1.1,,219,,.01,.03,4,4.2,,,,,,,,,,.67,,,198]);spider_ricoshate=1;return}}};var spider_positions=[];var spider_healths=[];var spider_death=[];var spider_ricoshate=0;const Spider=pos=>{let index=spiders.length;let time=0;let rotation=0;let cooldown=3;spider_positions.push(pos);spider_healths.push(1+Math.random()/2);spider_death.push(1);let group=Group([Mesh(spider_body.vertices,spider_body.indices,spider_body.colors,vector3(0,0,.8),u,vector3(.25,.25,.25),1),Mesh(spider_leg.vertices,spider_leg.indices,spider_leg.colors,vector3(0,0,0),u,vector3(.25,.25,.25),1),Mesh(spider_leg.vertices,spider_leg.indices,spider_leg.colors,vector3(0,0,.4),u,vector3(.25,.25,.25),1),Mesh(spider_leg.vertices,spider_leg.indices,spider_leg.colors,vector3(0,0,.8),u,vector3(.25,.25,.25),1),Mesh(spider_leg.vertices,spider_leg.indices,spider_leg.colors,vector3(0,0,1.2),u,vector3(.25,.25,.25),1)]);group.scale=vector3(spider_healths[index],spider_healths[index],spider_healths[index]);group.position=pos;meshes.push(group);return deltaTime=>{if(spider_healths[index]<=0){group.off=true;spider_death[index]=0;return}cooldown-=deltaTime;time+=deltaTime;group.meshes[1].rotation=vector3(0,Math.cos(time)*.05,Math.sin(time)*.15);group.meshes[2].rotation=vector3(0,Math.sin(time)*.05,Math.cos(time)*.15);group.meshes[3].rotation=vector3(0,Math.cos(time)*.05,Math.sin(time)*.15);group.meshes[4].rotation=vector3(0,Math.sin(time)*.05,Math.cos(time)*.15);group.rotation.y=Math.atan2(camera.position.x-group.position.x,camera.position.z-group.position.z);if(distanceTo(vector3(u,u,u),camera.position)<=4.358)return;if(distanceTo(group.position,camera.position)>3){let p=clone(group.position);p.x+=Math.sin(group.rotation.y)*deltaTime;p.z+=Math.cos(group.rotation.y)*deltaTime;if(pointIsOnMap(p.x,p.z))group.position=p}if(spider_ricoshate>.1){let p=clone(group.position);p.x-=Math.sin(group.rotation.y)*deltaTime*spider_ricoshate*5;p.z-=Math.cos(group.rotation.y)*deltaTime*spider_ricoshate*5;if(pointIsOnMap(p.x,p.z))group.position=p;spider_ricoshate-=deltaTime/10}if(distanceTo(group.position,camera.position)<4){if(cooldown<=0){health-=.05;cooldown=3;zzfx(...[,,100,,.04,,4,5,,,,,,1.4,,.1,,.89,,,-2247]);spider_ricoshate=1}}spider_positions[index]=group.position}};const Geometry=(vertices,indices,colors,mx=0,my=0)=>{var indicesLength=indices.length;let finalVertices=[],finalColors=[];for(let index of indices)finalVertices.push(vertices[index*3],vertices[index*3+1],vertices[index*3+2]);for(let i=0;i<colors.length;i+=3)finalColors.push(colors[i],colors[i+1],colors[i+2],colors[i],colors[i+1],colors[i+2],colors[i],colors[i+1],colors[i+2]);if(mx){finalVertices=[...finalVertices,...finalVertices.map(((x,i)=>i%3?x:-x))];finalColors=[...finalColors,...finalColors];indicesLength*=2}if(my){finalVertices=[...finalVertices,...finalVertices.map(((y,i)=>i%3==2?-y:y))];finalVertices=[...finalVertices,...finalVertices.map(((k,i,m)=>{if(i%3==1)return k;if(i%3==2)return m[i-2];else return m[i+2]}))];finalColors=[...finalColors,...finalColors,...finalColors,...finalColors];indicesLength*=4}const vertexBuffer=CreateAndBindBufferData(finalVertices);const colorBuffer=CreateAndBindBufferData(finalColors);const normalBuffer=CreateAndBindBufferData(getNormals(finalVertices));gl.bindBuffer(gl.ARRAY_BUFFER,null);return{vertices:vertices,indices:indices,colors:colors,indicesLength:indicesLength,vertexBuffer:vertexBuffer,colorBuffer:colorBuffer,normalBuffer:normalBuffer}};getNormals=vertices=>{let normals=[];for(let index=0;index<vertices.length;index+=9){let faceNormal=cross(normalize(vector3(vertices[index+3]-vertices[index],vertices[index+3+1]-vertices[index+1],vertices[index+3+2]-vertices[index+2])),normalize(vector3(vertices[index+6]-vertices[index],vertices[index+6+1]-vertices[index+1],vertices[index+6+2]-vertices[index+2])));normals.push(faceNormal.x,faceNormal.y,faceNormal.z,faceNormal.x,faceNormal.y,faceNormal.z,faceNormal.x,faceNormal.y,faceNormal.z)}return normals};CreateAndBindBufferData=bufferArray=>{const buffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,buffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(bufferArray),gl.STATIC_DRAW);return buffer};const Group=meshes=>({isGroup:true,position:vector3(0,0,0),rotation:vector3(0,0,0),scale:vector3(1,1,1),meshes:meshes});const vector3=(x=0,y=0,z=0)=>({x:x,y:y,z:z}),set=(v,x,y,z)=>{v.x=x;v.y=y;v.z=z},clone=v=>vector3(v.x,v.y,v.z),copy=v=>vector3(v.x,v.y,v.z),add=(a,b)=>vector3(a.x+b.x,a.y+b.y,a.z+b.z),summate=a=>abs(a.x)+abs(a.y)+abs(a.z);substract=(a,b)=>vector3(a.x-b.x,a.y-b.y,a.z-b.z),multiplyBy=(v,f)=>vector3(v.x*f,v.y*f,v.z*f),divide=(v,f)=>vector3(v.x/f,v.y/f,v.z/f),length=v=>Math.hypot(v.x,v.y,v.z),cross=(a,b)=>vector3(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-a.y*b.x),dot=(a,b)=>a.x*b.x+a.y*b.y+a.z*b.z,normalize=v=>divide(v,length(v)),rotX=(v,a)=>vector3(v.x,v.y*Math.cos(a)-v.z*Math.sin(a),v.y*Math.sin(a)+v.z*Math.cos(a)),rotY=(v,a)=>vector3(v.x*Math.cos(a)-v.z*Math.sin(a),v.y,v.x*Math.sin(a)+v.z*Math.cos(a)),rotZ=(v,a)=>vector3(v.x*Math.cos(a)-v.y*Math.sin(a),v.x*Math.sin(a)+v.y*Math.cos(a),v.z),distanceTo=(a,b)=>length(substract(a,b)),translate=v=>new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,v.x,v.y,v.z,1]),scale=v=>new Float32Array([v.x,0,0,0,0,v.y,0,0,0,0,v.z,0,0,0,0,1]),rotateX=rad=>{const s=Math.sin(rad),c=Math.cos(rad);return new Float32Array([1,0,0,0,0,c,s,0,0,-s,c,0,0,0,0,1])},rotateY=rad=>{const s=Math.sin(rad),c=Math.cos(rad);return new Float32Array([c,0,-s,0,0,1,0,0,s,0,c,0,0,0,0,1])},rotateZ=rad=>{const s=Math.sin(rad),c=Math.cos(rad);return new Float32Array([c,s,0,0,-s,c,0,0,0,0,1,0,0,0,0,1])},perspective=(fovy,aspect,near,far)=>{const f=1/Math.tan(fovy/2),nf=1/(near-far);return new Float32Array([f/aspect,0,0,0,0,f,0,0,0,0,(far+near)*nf,-1,0,0,2*far*near*nf,0])},lookAt=(eye,target,up)=>{const z=normalize(substract(eye,target)),x=normalize(cross(up,z)),y=cross(z,x);return new Float32Array([x.x,y.x,z.x,0,x.y,y.y,z.y,0,x.z,y.z,z.z,0,-dot(x,eye),-dot(y,eye),-dot(z,eye),1])},multiply=(a,b)=>{const result=new Float32Array(16);for(let i=0;i<4;i++){for(let j=0;j<4;j++){let sum=0;for(let k=0;k<4;k++){sum+=a[i*4+k]*b[k*4+j]}result[i*4+j]=sum}}return result},transform=(position,rotation,transformScale)=>multiply(multiply(scale(transformScale),multiply(multiply(rotateX(rotation.x),rotateY(rotation.y)),rotateZ(rotation.z))),translate(position)),lerp=(a,b,t)=>a+(b-a)*t,random=(v=1)=>Math.random()*v,randomBetween=v=>v-Math.random()*v*2,lerpColors=(a,b,t)=>Color(a.r+(b.r-a.r)*t,a.g+(b.g-a.g)*t,a.b+(b.b-a.b)*t),easeInOutCubic=x=>x<.5?4*x*x*x:1-Math.pow(-2*x+2,3)/2,angleBetween=(a,b)=>Math.atan2(a.x-b.x,a.z-b.z),abs=Math.abs;const Mesh=(vertices,indices,colors,position=vector3(),rotation=vector3(),scale=vector3(1,1,1),mx=0,my=0)=>{let finalColors=[];for(let color of colors)for(let i=0;i<color[1];i++)finalColors.push(...hexToRgbArray(color[0]));return{geometry:Geometry(vertices.map((v=>v/100)),indices,finalColors,mx,my),position:position,rotation:rotation,scale:scale}},hexToRgbArray=hex=>[parseInt(hex.slice(1,3),16)/255,parseInt(hex.slice(3,5),16)/255,parseInt(hex.slice(5,7),16)/255];var fog=15;const render=(meshes,camera,clear=1,additionalMatrix=null)=>{if(clear){gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);gl.uniform1f(uFogLocation,fog);gl.viewport(0,0,gl.canvas.width,gl.canvas.height);gl.uniformMatrix4fv(cameraMatrixLocation,false,lookAt(camera.position,camera.target,camera.up))}for(const mesh of meshes){if(mesh.off)continue;if(mesh.isGroup){render(mesh.meshes,camera,0,transform(mesh.position,mesh.rotation,mesh.scale));continue}bindBufferAttribute(mesh.geometry.vertexBuffer,program.aVertexPosition);bindBufferAttribute(mesh.geometry.colorBuffer,program.aVertexColor);bindBufferAttribute(mesh.geometry.normalBuffer,program.aNormal);if(additionalMatrix)gl.uniformMatrix4fv(meshMatrixLocation,false,multiply(transform(mesh.position,mesh.rotation,mesh.scale),additionalMatrix));else gl.uniformMatrix4fv(meshMatrixLocation,false,transform(mesh.position,mesh.rotation,mesh.scale));gl.drawArrays(gl.TRIANGLES,0,mesh.geometry.indicesLength);gl.bindBuffer(gl.ARRAY_BUFFER,null)}};bindBufferAttribute=(buffer,attribute)=>{gl.bindBuffer(gl.ARRAY_BUFFER,buffer);gl.vertexAttribPointer(attribute,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(attribute)};var uFogLocation;const initialiseWebGl=()=>{gl.clearColor(0,0,0,1);gl.enable(gl.DEPTH_TEST);gl.clearDepth(1);gl.depthFunc(gl.LEQUAL);gl.disable(gl.CULL_FACE);program=gl.createProgram();const vertexShaderSource=`#version 300 es\n        precision mediump float;\n        uniform mat4 uMeshMatrix, uCameraMatrix, uProjectionMatrix;\n        in vec3 aVertexPosition, aVertexColor,aNormal ;\n        out vec4 vPosition;\n        out vec3 vColor,vNormal;\n        void main(void) {\n            gl_Position = uProjectionMatrix * uCameraMatrix * uMeshMatrix * vec4(aVertexPosition, 1.0);\n            vColor = aVertexColor;\n            vPosition = gl_Position;\n            vNormal = aNormal;\n        }`;compileShader(vertexShaderSource,gl.VERTEX_SHADER,program);const fragmentShaderSource=`#version 300 es\n        precision mediump float;\n        in vec4 vPosition;\n        in vec3 vNormal, vColor;\n        uniform float uFog;\n        out vec4 fragColor;\n        void main(void) {\n            float fog = max(min(1.0 - vPosition.z / uFog, 1.0), 0.05);\n            float light = max(dot(normalize(vNormal), normalize(vec3(6.0, 6.0, 6.0))), .3);\n            fragColor = vec4(vColor * fog, 1.0);\n        }\n        `;compileShader(fragmentShaderSource,gl.FRAGMENT_SHADER,program);gl.linkProgram(program);gl.useProgram(program);meshMatrixLocation=gl.getUniformLocation(program,"uMeshMatrix");cameraMatrixLocation=gl.getUniformLocation(program,"uCameraMatrix");projectionMatrixLocation=gl.getUniformLocation(program,"uProjectionMatrix");const uLightPosition=new Float32Array(60).fill(0).map(((v,i)=>i%3==1?0:40-Math.random()*80));const uConstantColorLocation=gl.getUniformLocation(program,"uLightPosition");gl.uniform3fv(uConstantColorLocation,uLightPosition);uFogLocation=gl.getUniformLocation(program,"uFog");gl.uniform1f(uFogLocation,15);gl.uniformMatrix4fv(projectionMatrixLocation,false,perspective(camera.fov,camera.aspect,camera.near,camera.far));program.aVertexPosition=gl.getAttribLocation(program,"aVertexPosition");gl.enableVertexAttribArray(program.aVertexPosition);program.aVertexColor=gl.getAttribLocation(program,"aVertexColor");gl.enableVertexAttribArray(program.aVertexColor);program.aNormal=gl.getAttribLocation(program,"aNormal");gl.enableVertexAttribArray(program.aNormal)};compileShader=(shaderSource,shaderType,program)=>{const shader=gl.createShader(shaderType);gl.shaderSource(shader,shaderSource);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS))console.error("Shader compilation error:",gl.getShaderInfoLog(shader));else gl.attachShader(program,shader)};initialiseGameOverScene=()=>{messages=[];showMessage("𝕲𝖍𝖔𝖘𝖙 𝖆𝖌𝖆𝖎𝖓",halfWidth,halfHeight-15,30);showMessage("Press enter to reincarnate!",halfWidth,halfHeight+25,15)};updateGameOverScene=()=>{console.log(messages);context.clearRect(0,0,width,height);updateMessages();if(enter)showScene(playScene(),true)};const initialiseMenuScene=()=>{messages=[];showMessage("𝕯𝖎𝖒𝖊𝖓𝖘𝖎𝖔𝖓",halfWidth,halfHeight*.5,halfHeight*.4,1e7,30);showMessage("𝕿𝖍𝖎𝖗𝖙𝖊𝖊𝖓",halfWidth,halfHeight*.85,halfHeight*.4,1e7,35);showMessage("Escape the lair of Triskaideka",halfWidth,halfHeight*1.2,halfHeight*.2,1e7,60)};const updateMenuScene=deltaTime=>{context.clearRect(0,0,1e6,1e6);updateMessages();if(enter){showScene(playScene(),true)}};let playSceneCounter,cameraPos;let timerBreathe=0,timer=0;let heartbeat=.2;let energy=1;let u;let points=[vector3(0,0,0)];let spiders=[];let health=1;let sword=.99;let gems=[];var gemsFound=0;const initialisePlayScene=()=>{messages=[];meshes=[Mesh(plane.vertices,plane.indices,plane.colors,u,u,vector3(1e3,1e3,1e3)),Mesh(plane.vertices,plane.indices,plane.colors,vector3(0,5,0),u,vector3(1e3,1e3,1e3)),Mesh(circle.vertices,circle.indices,circle.colors,vector3(0,.1,0),vector3(0,Math.PI/4,0),vector3(5,5,5),1,1)];camera={position:vector3(0,1.69,0),direction:vector3(0,0,1),forwardSpeed:1.4,yaw:0,pitch:0,target:vector3(0,0,0),fov:Math.PI/2,aspect:width/height,near:.1,far:200,up:vector3(0,1,0)};setInterval((()=>{if(distanceTo(vector3(u,u,u),camera.position)>4.358){if(timer>=12){zzfx(...[5,.1,261.6256,,,.5,,10,,1.2,19,1,,,,,.05,.6,.3,1]);for(let i=0;i<timer*timer/10;i++){let x=100-Math.random()*200;let z=100-Math.random()*200;if(pointIsOnMap(x,z)){spiders.push(Spider(vector3(x,0,z)))}}}zzfx(...[2,.8,100,,,,,1.5,,.3,-99,.1,1.63,,,.11,.22]);timerBreathe=1;timer++}}),950);setInterval((()=>{zzfx(...[.4,.1,10,,.07,.26,,5,,,-100,.01,,,,,.25,.73,,,-1473]);heartbeat=.8;health+=.05}),1200);initialiseWebGl();document.addEventListener("click",enterPointerLock);document.addEventListener("mousemove",onMouseMove);maze();for(let i=0;i<50;i++){let x=50-Math.random()*100;let z=50-Math.random()*100;if(pointIsOnMap(x,z)){spiders.push(Spider(vector3(x,0,z)))}}for(let i=0;i<7;i++)gems.push(Gem())};const updatePlayScene=deltaTime=>{fog=Math.sin(timeStamp/200)*2+20+Math.random()*.4-.8;playSceneCounter++;heartbeat*=heartbeat;processInputPlayScene(deltaTime);render(meshes,camera);spiders.forEach((spider=>spider(deltaTime)));gems.forEach((gem=>gem(deltaTime)));context.globalAlpha=.4;context.drawImage(glCanvas,0,0);context.globalAlpha=1;context.fillStyle="white";context.font=`${15*(1+timerBreathe)}px monospace`;timerBreathe-=deltaTime;timerBreathe*=timerBreathe;context.fillText(timer,10,20);context.fillRect(halfWidth-.5,halfHeight-3.5,.5,7);context.fillRect(halfWidth-3.5,halfHeight-.5,7,.5);context.fillStyle="#E37E90";context.fillRect(width/4-10,10,halfWidth*health,5);context.font=`${15*(1+heartbeat)}px sans-serif`;context.fillText("❤️",width/4-10,15);context.fillStyle="#E8C165";context.fillRect(width/4-10,25,halfWidth*energy,5);context.font=`${15}px sans-serif`;context.fillText("⚡",width/4-10,30);context.strokeStyle="#BFDDE722";context.lineWidth=(halfWidth>>1)*sword;context.beginPath();context.arc(halfWidth,height*1.5,halfWidth,0,sword*Math.PI+Math.PI);context.stroke();context.fillStyle="#80D08C";context.fillText("⬡⬡⬡⬡⬡⬡⬡".replace(/⬡/g,((match,offset)=>offset<gemsFound?"⬢":match)),width-40,10);sword*=sword*sword;if(health>1)health=1;if(distanceTo(vector3(u,u,u),camera.position)<4.358){timer=0}if(gemsFound>0){showScene(winScene(),true)}updateMessages();if(health<0){showScene(gameOverScene(),true)}};const processInputPlayScene=deltaTime=>{let direction=vector3(0,0,0);if(up){direction=vector3(0,0,1+(shift&&energy>0))}else if(down){direction=vector3(0,0,-2/3)}else if(left){direction=vector3(2/3,0,0)}else if(right){direction=vector3(-2/3,0,0)}else{energy=Math.min(energy+deltaTime/100,1)}if(shift&&energy>0){energy-=deltaTime/100}cameraPos=add(camera.position,multiplyBy(rotY(direction,camera.yaw),camera.forwardSpeed*deltaTime));if(pointIsOnMap(cameraPos.x,cameraPos.z))camera.position=cameraPos;camera.direction=add(rotY(vector3(0,0,1),camera.yaw),vector3(0,camera.pitch,0));camera.target=add(camera.position,camera.direction)};const onMouseMove=event=>{camera.yaw+=event.movementX/500;camera.pitch-=event.movementY/500};const enterPointerLock=()=>{if(energy<0)return;document.documentElement.requestPointerLock();raycast(camera,spider_positions);zzfx(...[.8,,1e3,.11,.01,.21,4,.2,-.1,,,,,.4,.1,,,.59,,,19]);energy-=.05;sword=.99};var isInTransition=false,transitionCounter=0,sceneToShow=null;showScene=(scene,withTransition)=>{if(isInTransition)return;if(withTransition){sceneToShow=scene;transitionCounter=0;isInTransition=true}else currentScene=scene};updateTransition=()=>{transitionCounter+=1;let opacity=transitionCounter<=50?transitionCounter*2/100:1-transitionCounter/100;context.fillStyle=`rgba(0,0,0,${Math.max(opacity,0)})`;context.fillRect(0,0,width,height);if(transitionCounter==50){currentScene=sceneToShow;currentScene.initialise()}if(transitionCounter>100)isInTransition=false};menuScene=()=>({initialise:initialiseMenuScene,update:updateMenuScene});playScene=()=>({initialise:initialisePlayScene,update:updatePlayScene});gameOverScene=()=>({initialise:initialiseGameOverScene,update:updateGameOverScene});winScene=()=>({initialise:initialiseWinScene,update:updateWinScene});var initialiseWinScene=()=>{messages=[];showMessage("𝕲𝖍𝖔𝖘𝖙 𝖆𝖌𝖆𝖎𝖓",halfWidth,halfHeight-15,30);showMessage("Press enter to reincarnate!",halfWidth,halfHeight+25,15)};var updateWinScene=()=>{console.log(messages);context.clearRect(0,0,width,height);updateMessages();if(enter)showScene(playScene(),true)};const style="font-size: 20px; color: red;";console.log("%cIntellectual property of @retro-pigeon",style);var glCanvas=document.getElementById("glCanvas");var gl=glCanvas.getContext("webgl2");var glCanvas=document.getElementById("glCanvas");var gl=glCanvas.getContext("webgl2");var hudCanvas=document.getElementById("hudCanvas");var context=hudCanvas.getContext("2d");var width,height,halfWidth,halfHeight;function resize(){width=window.innerWidth/4;height=window.innerHeight/4;halfWidth=width*.5;halfHeight=height*.5;hudCanvas.width=width;hudCanvas.height=height;glCanvas.width=width;glCanvas.height=height;if(camera!==undefined&&projectionMatrixLocation!==undefined){camera.aspect=width/height;gl.uniformMatrix4fv(projectionMatrixLocation,false,perspective(camera.fov,camera.aspect,camera.near,camera.far))}}resize();onresize=resize;var meshMatrixLocation,cameraMatrixLocation,projectionMatrixLocation,camera,meshes,program;var currentScene=menuScene();currentScene.initialise();var deltaTime,previousTime=0;const gameLoop=timeStamp=>{deltaTime=(timeStamp-previousTime)*.01;previousTime=timeStamp;window.timeStamp=timeStamp;currentScene.update(deltaTime);if(isInTransition)updateTransition(deltaTime);requestAnimationFrame(gameLoop)};requestAnimationFrame(gameLoop);var left,right,up,down,space,esc,enter,shift;const updateKeys=(code,val)=>{switch(code){case 65:left=val;break;case 16:shift=val;break;case 87:up=val;break;case 68:right=val;break;case 32:space=val;break;case 27:esc=val;break;case 13:enter=val;break;case 83:down=val;break;default:break}};onkeydown=e=>updateKeys(e.keyCode,true);onkeyup=e=>updateKeys(e.keyCode,false);